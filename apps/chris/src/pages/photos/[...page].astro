---
import type { PaginateFunction } from "astro";
import { getCollection } from "astro:content";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import Prose from "../../components/Prose.astro";
import FormattedDate from "../../components/FormattedDate.astro";

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
    const collection = await getCollection("photos");
    const photos = collection.sort((a, b) => (a.data.date > b.data.date ? 0 : 1)).reverse();
    return paginate(photos, { pageSize: 100 });
}

const { page } = Astro.props;
---

<DefaultLayout title="Photos" , description="All the photos">
    <Prose>
        <h1>Photos</h1>
    </Prose>
    <ol class="mt-8 flex flex-col md:flex-row md:flex-wrap gap-4 justify-evenly">
        {
            page.data.map(p => {
                const { title, date, photo } = p.data;
                const { body } = p;

                const wordCount = body
                    .trim()
                    .split(" ")
                    .map(w => w.trim())
                    .filter(w => w !== "").length;

                return (
                    <li class="gap-2">
                        <div class="p-6 shadow-lg rounded-lg border border-neutral-200">
                            <a class="block" href={`/photos/${p.slug}`}>
                                <img
                                    loading="lazy"
                                    src={photo.preview.replace(
                                        "s3/",
                                        "https://s3.amazonaws.com/cnunciato-website-media/",
                                    )}
                                    class="block rounded-lg shadow-inner border border-neutral-100 overflow-hidden md:w-80 md:h-80 object-cover top"
                                    alt={title}
                                />
                            </a>
                            <div class="text-sm mt-4 flex justify-between">
                                <FormattedDate date={p.data.date} />

                                {wordCount > 0 && (
                                    <span>
                                        {wordCount}
                                        {wordCount === 1 ? "word" : "words"}
                                    </span>
                                )}
                            </div>
                        </div>
                    </li>
                );
            })
        }
    </ol>
</DefaultLayout>
