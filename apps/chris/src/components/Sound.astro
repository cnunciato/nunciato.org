---
const { file } = Astro.props;
const audioUrl = `/audio/${file}`;
---

<div class="relative h-56 w-full">
    <ol
        id="waveform"
        class="z-0 absolute flex w-full justify-evenly items-center top-0 right-0 bottom-0 left-0"
    >
    </ol>
</div>

<audio id="player" controls class="rounded shadow w-full block mt-2" src={audioUrl}></audio>

<script define:vars={{ audioUrl }}>
    const player = document.querySelector("#player");
    const samples = 1000;

    const unplayed = "bg-basecolor-700";
    const played = "bg-accentcolor-300";

    player.addEventListener("timeupdate", event => {
        const current = event.target.currentTime;
        const duration = event.target.duration;

        if (current && duration) {
            const complete = (current / duration) * 100;
            const latest = Math.ceil((complete / 100) * samples);

            document.querySelectorAll(`#waveform li`).forEach((el, i) => {
                el.setAttribute("class", i <= latest ? played : unplayed);
            });
        }
    });

    fetchWaveform(audioUrl).then(data => {
        const waveform = document.querySelector("#waveform");

        data.map(value => {
            const el = document.createElement("li");
            el.setAttribute("class", unplayed);
            el.setAttribute("style", `height: ${value * 100}%; width: ${100 / data.length}%;`);
            waveform.appendChild(el);
        });
    });

    async function fetchWaveform(url) {
        const ctx = new AudioContext();

        try {
            const response = await fetch(url);
            const decoded = await ctx.decodeAudioData(await response.arrayBuffer());
            const raw = decoded.getChannelData(0);
            const blockSize = Math.floor(raw.length / samples);
            const filtered = [];

            for (let i = 0; i < samples; i++) {
                let blockStart = blockSize * i;
                let sum = 0;

                for (let j = 0; j < blockSize; j++) {
                    sum = sum + Math.abs(raw[blockStart + j]);
                }

                filtered.push(sum / blockSize);
            }

            const normalize = filtered => {
                const multiplier = Math.pow(Math.max(...filtered), -1);
                return filtered.map(n => n * multiplier);
            };

            const normalized = normalize(filtered);
            const data = normalized;

            return data;
        } catch (error) {
            console.error(`Unable to fetch the audio file. Error: ${error.message}`);
        }
    }
</script>
